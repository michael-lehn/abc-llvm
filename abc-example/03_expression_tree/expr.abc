#include <assert.hdr>
#include <stdlib.hdr>
#include <stdio.hdr>

#include "expr.hdr"

fn releaseExpr(expr: -> const Expr)
{
    switch (expr->kind) {
	case EXPR_PRIMARY:
	    break;
	case EXPR_BINARY:
	    releaseExpr(expr->binary.left);
	    releaseExpr(expr->binary.right);
	    break;	
	default:
	    //assert(0);
	    break;
    }
}

fn createLiteralExpr(val: i64): -> Expr
{
    local expr: -> Expr = malloc(sizeof(*expr));
    expr->val = val;
    expr->kind = EXPR_PRIMARY;
}

fn createBinaryExpr(op: BinaryExprKind,
		    left: -> const Expr,
		    right: -> const Expr): -> Expr
{
    local expr: -> Expr = malloc(sizeof(*expr));
    expr->binary.op = op;
    expr->binary.left = left;
    expr->binary.right = right;
    expr->kind = EXPR_BINARY;
}

fn evalExpr(expr: -> const Expr): i64
{
    switch (expr->kind) {
	case EXPR_PRIMARY:
	    return expr->val;
	case EXPR_BINARY:
	    switch (expr->binary.op) {
		case EXPR_ADD:
		    return evalExpr(expr->binary.left)
			 + evalExpr(expr->binary.right);
		case EXPR_SUB:
		    return evalExpr(expr->binary.left)
			 - evalExpr(expr->binary.right);
		case EXPR_MUL:
		    return evalExpr(expr->binary.left)
			 * evalExpr(expr->binary.right);
		case EXPR_DIV:
		    return evalExpr(expr->binary.left)
			 / evalExpr(expr->binary.right);
		default:
		    assert(0);
		    break;
	    }
	    break;
	default:
	    assert(0);
	    break;
    }
}

fn binaryExprKindStr(kind: BinaryExprKind): -> char;

fn printExprWithIndent(indent: i32, expr: -> const Expr)
{
    printf("%*s%", indent, "");
    switch (expr->kind) {
	case EXPR_PRIMARY:
	    printf("%lld\n", expr->val);
	    break;
	case EXPR_BINARY:
	    printf("%s\n", binaryExprKindStr(expr->binary.op));
	    printExprWithIndent(indent + 4, expr->binary.left);
	    printExprWithIndent(indent + 4, expr->binary.right);
	    break;
	default:
	    assert(0);
	    break;
    }
}

fn printExpr(expr: -> const Expr)
{
    printExprWithIndent(0, expr);
}

fn binaryExprKindStr(kind: BinaryExprKind): -> char
{
    switch (kind) {
	case EXPR_ADD: return "+";
	case EXPR_SUB: return "-";
	case EXPR_MUL: return "*";
	case EXPR_DIV: return "/";
	default: return "<? Binary Expr Kind ?>";
    }
}
