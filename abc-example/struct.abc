fn print(: -> u8);
fn printLn(: -> u8);
fn printNl();
fn printU64(:u64);


type Foo = struct { a: u64; b: u32; },
     int = u32,
     voidPtr  = ->;

fn getFoo(a: u64, b: u32): Foo
{
    local foo : Foo;

    foo.a = 4;
    foo.b = 14;
    return foo;
}

fn printFoo(ident: -> u8, f: Foo)
{
    print(ident); print(".a = "); printU64(f.a); printNl();
    print(ident); print(".b = "); printU64(f.b); printNl();
    printNl();
}

global a: u8 = 123;

fn main(): Foo
{
    local foo: Foo = getFoo(1, 2);
    local bar: struct {a :int; b : int; }; // anonymous struct type
    local p: voidPtr = &bar,
	  q: -> Foo = p;

    printFoo("foo", foo);

    foo = getFoo(3, 4);
    printFoo("foo", foo);

    // copy 'foo' to 'bar'
    bar.a = foo.a;
    bar.b = foo.b;
    // this is illegal ('bar' has different struct type)
    // bar = foo;  // error
    printFoo("bar", bar);
}

