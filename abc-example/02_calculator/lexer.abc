@ <stdio.hdr>

@ "lexer.hdr"

global
    token: Token;

fn tokenKindStr(kind: TokenKind): -> char
{
    switch (kind) {
	case EOI:
	    return "End of input";
	case DECIMAL_LITERAL:
	    return "DECIMAL_LITERAL";
	case HEXADECIMAL_LITERAL:
	    return "HEXADECIMAL_LITERAL";
	case OCTAL_LITERAL:
	    return "OCTAL_LITERAL";
	case PLUS:
	    return "+";
	case MINUS:
	    return "-";
	case ASTERISK:
	    return "*";
	case SLASH:
	    return "/";
	case LPAREN:
	    return "(";
	case RPAREN:
	    return ")";
	case SEMICOLON:
	    return ";";
	default:
	    return "<unknown token kind>";
    }
}

global
    pos: TokenPos = { 1, 0},
    ch: int;


fn nextCh(): char
{
    ch = getchar();
    ++pos.col;
    if (ch == '\n') {
	++pos.line;
	pos.col = 0;
    }
    return ch;
}

fn isWhiteSpace(ch: int): bool
{
    return ch == ' ' || ch == '\t';
}

fn isDecDigit(ch: int): bool
{
    return ch >= '0' && ch <= '9';
}

fn isOctDigit(ch: int): bool
{
    return ch >= '0' && ch <= '7';
}

fn isHexDigit(ch: int): bool
{
    return isDecDigit(ch) || (ch >= 'a' && ch <= 'f') ||
           (ch >= 'A' && ch <= 'F');
}

fn isLetter(ch: int): bool
{
    return ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A' && ch <= 'Z')) ||
           ch == '_';
}

fn tokenSet(kind: TokenKind): TokenKind
{
    return token.kind = kind;
}

fn tokenReset()
{
    token.loc.from.line = pos.line;
    token.loc.from.col = pos.col;
    token.valLen = 0;
}

fn tokenUpdate(ch: int)
{
    token.loc.to.line = pos.line;
    token.loc.to.col = pos.col;
    token.val[token.valLen++] = ch;
    token.val[token.valLen] = 0;
}

fn getToken(): TokenKind
{
    // init ch, skip white spaces and newlines
    while (ch == 0 || isWhiteSpace(ch) || ch == '\n') {
        nextCh();
    }

    tokenReset();

    if (ch == EOF) {
        return tokenSet(EOI);
    } else if (isDecDigit(ch)) {
        // parse literal
        if (ch == '0') {
	    tokenUpdate(ch);
            nextCh();
            if (ch == 'x') {
		tokenUpdate(ch);
                nextCh();
                if (isHexDigit(ch)) {
                    while (isHexDigit(ch)) {
			tokenUpdate(ch);
                        nextCh();
                    }
                    return tokenSet(HEXADECIMAL_LITERAL);
                }
                return tokenSet(BAD_TOKEN);
            }
            while (isOctDigit(ch)) {
		tokenUpdate(ch);
                nextCh();
            }
            return tokenSet(OCTAL_LITERAL);
        } else if (isDecDigit(ch)) {
            while (isDecDigit(ch)) {
		tokenUpdate(ch);
                nextCh();
            }
            return tokenSet(DECIMAL_LITERAL);
	}
    } else if (ch == '+') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(PLUS);
    } else if (ch == '-') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(MINUS);
    } else if (ch == '(') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(LPAREN);
    } else if (ch == ')') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(RPAREN);
    } else if (ch == ';') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(SEMICOLON);
    } else if (ch == '*') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(ASTERISK);
    } else if (ch == '/') {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(SLASH);
    } else {
	tokenUpdate(ch);
	nextCh();
	return tokenSet(BAD_TOKEN);
    }
}
