fn printU64(:u64);
fn printNl();
fn print(: -> u8);

/*
type int = u16;

type Val = struct {
    id: u8;
    ident: -> u8;
};

type Node = struct {
    next: -> Node;
    val: Val;
};
*/

fn foo(a: u8)
{
    print("I am 'foo' and a = ");
    printU64(a);
    printNl();
}

fn bar(a: u8)
{
    print("I am 'bar' and a = ");
    printU64(a);
    printNl();
}

fn sel(s: u8): -> fn(:u8)
{
    if (s == 1) {
	return foo;
    }
    return bar;
}

fn main(): u8
{
    local p: -> fn(:u8),    // pointer to function (aka "function pointer")
	  q: ->-> fn(:u8);  // pointer to pointer to function

    p = foo;
    (*p)(42);		    // one way to use a function pointer

    p = bar;
    p->(13);		    // another way to use a function pointer
    p[0](24);		    // another way to use a function pointer

    // p(12);		    // error: in ABC function pointers need to be
			    //	      dereferenced
    q = &p;		    // using a pointer to a function pointer
    q->->(123);
    (**q)(21);

    sel(1)->(111);
    sel(2)->(222);
}
