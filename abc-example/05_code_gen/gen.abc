#include <assert.hdr>
#include <stdio.hdr>

#include "gen.hdr"

fn getReg() :GenReg
{
    global reg: GenReg;
    return reg++;
}

fn genLoad(val: u64) : GenReg
{
    local result: GenReg = getReg();
    printf("\tload 0x%016llx, %%%d\n", val, result);
    return result;
}

fn genLoadAddr(ident: -> const char): GenReg
{
    local result: GenReg = getReg();
    printf("\tload %s, %%%d\n", ident, result);
    return result;
}

fn genFetch(reg: GenReg): GenReg
{
    local result: GenReg = getReg();
    printf("\tfetch (%%%d), %%%d\n", reg, result);
    return result;
}

fn genStore(val: GenReg, addr: GenReg)
{
    printf("\tstore %%%d, (%%%d)\n", val, addr);
}

fn genAluInstr(op: GEN_ALU_OP, left: GenReg, right: GenReg) : GenReg
{
    local result: GenReg = getReg();
    switch (op) {
	case GEN_ADD:
	    printf("\tadd %%%d, %%%d, %%%d\n", left, right, result);
	    break;
	case GEN_SUB:
	    printf("\tsub %%%d, %%%d, %%%d\n", left, right, result);
	    break;
	case GEN_MUL:
	    printf("\tmul %%%d, %%%d, %%%d\n", left, right, result);
	    break;
	case GEN_DIV:
	    printf("\tdiv %%%d, %%%d, %%%d\n", left, right, result);
	    break;
    }
    return result;
}
