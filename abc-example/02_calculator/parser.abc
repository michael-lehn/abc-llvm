#include <stdio.hdr>

#include "lexer.hdr"
#include "parser.hdr"

fn parseAdditiveExpression(val: -> int) : bool;
fn parseMultiplicativeExpression(val: -> int) : bool;
fn parsePrimary(val: -> int) : bool;

fn parseExpression(val: -> int) : bool
{
    if (parseAdditiveExpression(val)) {
	return true;
    }
    return false;
}

fn parseAdditiveExpression(val: -> int) : bool
{
    if (!parseMultiplicativeExpression(val)) {
	return false;
    }

    while (token.kind == PLUS || token.kind == MINUS) {
	local op: TokenKind = token.kind;
        getToken();

	local val2: int;
	if (!parseMultiplicativeExpression(&val2)) {
	    printf("multiplicative expression expected\n");
            return false;
        }
	op == PLUS ? (*val += val2) : (*val -= val2);
    }
    return true;
}

fn parseMultiplicativeExpression(val: -> int) : bool
{
    if (!parsePrimary(val)) {
	return false;
    }

    while (token.kind == ASTERISK || token.kind == SLASH) {
	local op: TokenKind = token.kind;
        getToken();

	local val2: int;
	if (!parsePrimary(&val2)) {
	    printf("primary expression expected\n");
            return false;
        }
	op == ASTERISK ? (*val *= val2) : (*val /= val2);
    }
    return true;
}

fn parsePrimary(val: -> int) : bool
{
    if (token.kind == DECIMAL_LITERAL) {
	*val = strtol(&token.val[0], &token.val[token.valLen], 10);
	getToken();
	return true;
    } else if (token.kind == HEXADECIMAL_LITERAL) {
	*val = strtol(&token.val[0], &token.val[token.valLen], 16);
	getToken();
	return true;
    } else if (token.kind == OCTAL_LITERAL) {
	*val = strtol(&token.val[0], &token.val[token.valLen], 8);
	getToken();
	return true;
    } else if (token.kind == LPAREN) {
	getToken();
	if (!parseAdditiveExpression(val)) {
	    printf("multiplicative expression expected\n");
	    return false;
	}
	if (token.kind != RPAREN) {
	    printf("')' expected\n");
	    return false;
	}
	getToken();
	return true;
    }
    return false;
}
